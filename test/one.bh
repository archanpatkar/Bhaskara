x := if(true & false) {
    x := 5
    x
} else (y := 10)

def f1(x) = x**3

def f2(x,y) {
    x + y
}

print(f1(10))

out := f2(1,f1(2))

print(out)

def fac(n) = if n == 0 then 1 else n * fac(n-1)

print(fac <| 3)

def test2(a,b,c,d) 
{
    print <| "Welcome to test2!!!" 
    a + b + c + d
}
4 |> fac |> print

print <| fac <| 5

y = "hello world!"
print(y)

i := 0
while i < 15 do (test2(i,i*2,i*2,i*4) |> print) & (i = i + 1)

l1 := [10,20,30,40,50]

print("using For loop")
for i in l1 {
    i |> print
}

print("Using While loop")
i := 0
while(i < len(l1)){
    l1[i] |> print
    i = i + 1
}

def sum() {
    acc := 0
    for i in args do acc = acc + i
    acc
}

[ x*2, y+5 | x <- range(0,20), x + 1 % 2, y <- range(0,30)]

sum(1,2,3,4,5,6,7,8,9) |> print

l1[0] = -1
l1[1] = -2

print(l1)

obj1 := {
    x:10,
    y:20
}

obj1.z = "hgfdhfdhfd"

print(obj1.x)
print(obj1.y)
print(obj1)

meta := {
    deposit: def(v) {
        if v > 0 {
          this.balance = this.balance + v
          this.lt = v
        }
    },
    withdraw: def(v) {
        if v <= this.balance {
            this.balance = this.balance - v
            this.lt = -v
        }
    },
    statement: def() {
        this.balance |> print
        this.lt |> print
    }
}

def piggybank() => { 
    balance:0, 
    lt:0, 
    __proto__:meta 
}

print("testing prototypal")
print("----------------------------")
pg1 := piggybank()
print(pg1)
pg1.deposit(10)
pg1.withdraw(3)
pg1.statement()
print("----------------------------")

print(obj1?.f1(10,20,30))

(def () { print("hola!") })()

def log(f) {
    print("here1!")
    def() {
        print("Entering")
        f(args[0])
        print("Exiting")
    }
}

def log2(f) {
    print("here2!")
    print(f)
    def() {
        print("Entering2")
        f(args[0])
        print("Exiting2")
    }
}

// n := 0

@log2
@log
def test4(n) {
    if n % 2 {
        "odd" |> print
    } else {
        "even" |> print
    }
}

test4(2)
test4(2)

l := lazy 5*4
print(force l)
print("here near fibbo")

//for i in 1..15 {
  //  go fac(i) then def(v) { 
    //    v + (force l) |> print
      //  test4(v)
    //}
//}

print("here near fibbo")
def fib(n) => match n with
                  | 0 => 0
                  | 1 => 1
                  | _ => fib(n-1) + fib(n-2)

def fib(n) => match n with
                  | x when x <= 1 => x
                  | _ => fib(n-1) + fib(n-2)

print <| "Fibonacci Seq:"
print <| fib(8)

def cons(car, cdr) => [car, cdr]
def car(l) => force l[0]
def cdr(l) => force l[1]

def stream(start) {
    {
        current: start,
        def next() {
            temp := car(this.current)
            this.current = cdr(this.current)
            temp
        },
        def take(n) {
            arr := 0..n
            for i in arr do arr[i] = this.next()
            arr
        }
    }
}

def add1(n) {
    cons(lazy n,lazy add1(n+1))
}

st1 := stream(add1(10))
for i in 0..21 do st1.next() |> print

print(st1.take(10))

archan := "Archan Patkar"

print <| 10
print <| 20
print <| archan


l1 := [10,20,30,40,50]

// l1 map _+1

// [x*x*y | x <- 1..8, y <- 2..20, x % 2]

def square(x) => x*x

obj1 := {
    value: 10,
    def __add__(y) => this.value + y,
    def __call__() {
        print("this is amazing!")
        print("hello")
    } 
}

print(obj1 + 5)
print(obj1 + 11)
obj1()
obj1()

print("archan")

a := #(
	(defun add(x,y) (print (* (+ x y) 3)))
	(add 10 20)
    (${lazy def(x) => x+6} 30)
)

// # + 2 * # - 4

//print("------------here---------------")
//print(a)

// print("Before")
// o.chain(def(f) { 
// f |> print 
// })
// print("After")

// Do notation
// do {
//     x <<= m
//     y <<= n
// }

// m >>= f1 

// def lazyFib() {
//     yield 10
//     yield 20
// }
