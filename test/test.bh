x := !(T | F) & ~F & 5 > 5
x = (-500) * 500 + 6

// Disjoint Sum types or Enums 
type Color = Purple | Blue | RGB(r,g,b)

type Maybe = Nothing | Just(x)

type Tree = Leaf(v) | Node(x,y)

def f1(x) = x^10
def f2(y) {
    z := x + f1(y)*10
    sin((z & false)+1)
}
print(f2(10))

macro archan = 10

macro archan(x,y) = x+y


// Lexical Scoping
f3 := def(x) { x^2 }

// Dynamic Scoping
f4 := dyn() {  }

k := [10,20,30,40]
j := [1,2,3]
f <- (11,22,33)
print(mean(k))

// Constant
x <- 10

z := (@x in k,#y in j) holds p(x) & m(y) | m(x) 

(T | F) & ~F & 10 > 5 & (~F == T)
archan_1 + 5 & jagrat -> boy & ~true

x := (#f) in k holds m(f) do {

}

// Tagged Template strings
sql`
SELECT * FROM {};
`

table := "students"
print(sql`SELECT * FROM $table WHERE x < ${10}`)

temp = html`
<div>
<h1>Hello World!</h1>
<h2>I am an embedded DSL</h2>
<h3>My name is {} </h3>
</div>
`

"Archan" |> temp |> render

// can introduce code quotations
<@ 
f4(10,x + y)
@>


def f3(x) = {
    y := 2
    match x {
        | 10 => match y {
                | 0 => x
                | _ => x*2
            } 
        | 0 => (x+3)*3
        | _ => x+2 
    }
}